pipeline {
    /*  
     * On ex√©cute chaque √©tape dans un conteneur Docker
     * qui contient d√©j√† Maven et Java 17 configur√©s.
     */
    agent {
        docker {
            image 'maven:3.9.9-openjdk-17'   // conteneur Maven + JDK17
            args  '-v $HOME/.m2:/root/.m2'    // monte ton repo Maven local pour le cache
        }
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Clonage du d√©p√¥t‚Ä¶'
                checkout scm
            }
        }

        stage('Build & Test') {
            steps {
                echo 'üß± Compilation et tests unitaires‚Ä¶'
                sh 'mvn clean verify'
            }
        }

        stage('Analyse SonarQube') {
            steps {
                echo 'üîç Analyse SonarQube‚Ä¶'
                withSonarQubeEnv('SonarQube_Server') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                echo 'üß™ V√©rification du Quality Gate‚Ä¶'
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success { echo '‚úÖ Pipeline termin√© avec succ√®s !' }
        failure { echo '‚ùå Pipeline √©chou√©. V√©rifie les logs ou le Quality Gate.' }
    }
}
